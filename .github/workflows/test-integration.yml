name: Integration Test

on:
  # push:
  #   branches: [ "integration-test-workflow" ]

  workflow_dispatch:
    inputs:
      devnet_version:
        description: 'aeneid; mainnet; internal-devnet'
        required: true
        default: 'internal-devnet'
        type: choice
        options:
          - aeneid
          - mainnet
          - internal-devnet

jobs:
  print-config:
    runs-on: ubuntu-latest

    steps:
      - name: Print Inputs
        run: |
          echo "Inputs:"
          echo "devnet_version: ${{ inputs.devnet_version || github.event.inputs.devnet_version || 'internal-devnet' }}"

  set-devnet-constants:
    runs-on: ubuntu-latest
    steps:
      - name: Devnet Version
        id: devnet_version
        run: |
          declare -A devnet_config=(
            ["aeneid"]="1315 https://aeneid.storyrpc.io"
            ["mainnet"]="1514 https://public.storyrpc.io"
            ["internal-devnet"]="1512 https://rpc.devnet.storyrpc.io"
          )

          devnet_version="${{ inputs.devnet_version || github.event.inputs.devnet_version || 'internal-devnet' }}"

          if [[ -n "${devnet_config[$devnet_version]}" ]]; then
            read -r chainid rpcurl <<< "${devnet_config[$devnet_version]}"
            
            echo "CHAINID=$chainid" >> $GITHUB_OUTPUT
            echo "RPCURL='$rpcurl'" >> $GITHUB_OUTPUT
          else
            echo "Unknown devnet version: $devnet_version"
            exit 1
          fi


    outputs:
      CHAINID: ${{ steps.devnet_version.outputs.CHAINID }}
      RPCURL: ${{ steps.devnet_version.outputs.RPCURL }}

  test-integration:
    needs: set-devnet-constants
    runs-on: ubuntu-latest
    env:
      RPC_URL: ${{ needs.set-devnet-constants.outputs.RPCURL }}
      TEST_SENDER_ADDRESS: "0x7D01c62110fb498e6450A7857DD172dDd41EAbD3"
      TEST_SENDER_SECRETKEY: ${{ secrets.TEST_SENDER_SECRETKEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Set Protocol Addresses
        run: |
          PROTOCOL_ADDRESS='{
            "main": {
              "AccessController": "0x492DB9F89690bb2Dc4049b7D643A353d7d0369BB",
              "ArbitrationPolicyUMA": "0x18eE79Fc38602a04c4353DD193510c01902A0852",
              "CoreMetadataModule": "0x9F850A3337ecBdd80814a2B8618F5F4579123000",
              "CoreMetadataViewModule": "0x9B83E438ac6822a919EA3a371f0b1b52B9bb0029",
              "DisputeModule": "0xDB486fAa4Cf437a4E4f21549592837F4a51E9123",
              "EvenSplitGroupPool": "0x85b07fc4D8d993D1Fe251586776786D204566778",
              "GroupNFT": "0x3dCc9eB0aCEf490d49C4962c743e9F66803A2571",
              "GroupingModule": "0xc4CFA2BdaFe7b091037D24099aABb3dB7DB6696c",
              "IPAccountImpl": "0x03149938E49e787980a48f456B1f84e7E10EdDD9",
              "IPAccountImplBeacon": "0x4157D1C78AaC11b21Cf33a3E05000AAfCF73e7A9",
              "IPAccountImplBeaconProxy": "0x07CF6aE3be5E5c9baDE382EaDDBc11032B77E48D",
              "IPAssetRegistry": "0xA04340fe698B6fD48c05A0cd204Ede236f46CC9A",
              "IPGraphACL": "0x1640A22a8A086747cD377b73954545e2Dfcc9Cad",
              "IpRoyaltyVaultBeacon": "0xd58945A37E0611aDAAD1339ae620588546e428bb",
              "IpRoyaltyVaultImpl": "0x7aa7772D52bB83fbEc8dAbf8611818113Fe651EA",
              "LicenseRegistry": "0x2C182FB15B07Fc871c13033d180ae54b7a919549",
              "LicenseToken": "0x5f39032a9536af404DA9DfDFdbA1B41a17735079",
              "LicensingModule": "0xd3B9f9C3a87640e6bD951105990B5108a6A47D18",
              "MockERC20": "0x1514000000000000000000000000000000000000",
              "ModuleRegistry": "0x9AA7E635e809b4a3AecB4FcD390494ED9e521f94",
              "PILicenseTemplate": "0x344FE14edc8CF2919C031AB4c925E163566A8d5D",
              "ProtocolAccessManager": "0x7fc3eD9B2CC14C0872ec633c6CC290b8B9B3AA5A",
              "ProtocolPauseAdmin": "0x3b3fFAA254d9dCEEA4D59ae1dF28c9F84D4eE901",
              "RoyaltyModule": "0x0FD39C7894f72dD3E3DeEcdA7F1829890f09f375",
              "RoyaltyPolicyLAP": "0x0889d0b5C1F89f75Adf9D391D32B8Da2F0266E4D",
              "RoyaltyPolicyLRP": "0x5ae2dB5710b35925E6316cf6621e01917680B4a0"
            }
          }'
          
          echo $PROTOCOL_ADDRESS > ./node_modules/@story-protocol/protocol-core/deploy-out/deployment-${{ needs.set-devnet-constants.outputs.CHAINID }}.json
      
      - name: Set Periphery Addresses
        run: |
          PERIPHERY_ADDRESS='{
           "main": {
              "DerivativeWorkflows": "0xe7023938d925c5dBCFa03A5e4A5c1c55904a60aa",
              "GroupingWorkflows": "0x26E1dBE2bd438541C1d523bA491991f261884A02",
              "LicenseAttachmentWorkflows": "0x999Ec5dA0F0F86256D1CC04F2df22FcFC7878d31",
              "LockLicenseHook": "0x762A934Cf36c72DBb7a2b7404b54817de32407b6",
              "OwnableERC20Beacon": "0x0f765a092F8917376dd5C17bf36b136174cEb929",
              "OwnableERC20Template": "0x27522309f2A8f90389454a735c86fe425A5Ad0aa",
              "RegistrationWorkflows": "0x7215644294AF19e7601863F9A59FAf71E9cDD1c5",
              "RoyaltyTokenDistributionWorkflows": "0xa5B76116805D04ae39fB581ccF19701Fe14c4E6A",
              "RoyaltyWorkflows": "0xD4f34e015F36C3c3a13Df2cd1e55ab40Eb36cAB4",
              "SPGNFTBeacon": "0x406Ed2033B3e7015fb54c0152f1F95Ec1e637aCf",
              "SPGNFTImpl": "0x523B320f56E414a8de78eE97473fF667125Fec15",
              "TokenizerModule": "0x97EB86E92f4A000bD7c4E1AE7DD977CCB36ad872",
              "TotalLicenseTokenLimitHook": "0xCAB1a6796C7A8e293750E38571eFaa9a14De5CE6"
            }
          }'

          devnet_version="${{ inputs.devnet_version || github.event.inputs.devnet_version || 'internal-devnet' }}"
          # if [[ "$devnet_version" == "aeneid" ]]; then
          echo $PERIPHERY_ADDRESS > ./deploy-out/deployment-${{ needs.set-devnet-constants.outputs.CHAINID }}.json
          # fi

      - name: Build Contracts
        run: |
          forge build

      - name: Run DerivativeIntegration Tests
        if: always() && !cancelled()
        run: |
          forge script test/integration/workflows/DerivativeIntegration.t.sol:DerivativeIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation

      - name: Run GroupingIntegration Tests
        if: always() && !cancelled()
        run: |
          forge script test/integration/workflows/GroupingIntegration.t.sol:GroupingIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation >> test-results.log

      - name: Run LicenseAttachmentIntegration Tests
        if: always() && !cancelled()
        id: license_attachment_test
        continue-on-error: true
        run: |
          forge script test/integration/workflows/LicenseAttachmentIntegration.t.sol:LicenseAttachmentIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation > license_attachment_test.log
  
      - name: Check LicenseAttachmentIntegration Results and Append Log
        if: always() && !cancelled()
        run: |
          cat license_attachment_test.log >> test-results.log
          if [[ "${{ steps.license_attachment_test.outcome }}" == "failure" ]]; then
            if grep -q "SUCCESS: Correctly reverted when exceeding the token limit." license_attachment_test.log; then
              echo "✅ Transaction failed as expected. Continuing workflow."
              exit 0
            else
              echo "❌ Transaction failed with an unexpected error."
              exit 1
            fi
          fi

      - name: Run RegistrationIntegration Tests
        if: always() && !cancelled()
        run: |
          forge script test/integration/workflows/RegistrationIntegration.t.sol:RegistrationIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation >> test-results.log

      - name: Run RoyaltyIntegration Tests
        if: always() && !cancelled()
        run: |
          forge script test/integration/workflows/RoyaltyIntegration.t.sol:RoyaltyIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation >> test-results.log

      - name: Run RoyaltyTokenDistributionIntegration Tests
        if: always() && !cancelled()
        run: |
          forge script test/integration/workflows/RoyaltyTokenDistributionIntegration.t.sol:RoyaltyTokenDistributionIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation >> test-results.log

      - name: Merge Test Results
        run: |
          cat test-results.log

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./test-results.log
            ./license_attachment_test.log
