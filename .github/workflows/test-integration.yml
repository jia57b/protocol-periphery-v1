name: Integration Test

on:
  # push:
  #   branches: [ "integration-test-workflow" ]

  workflow_dispatch:
    inputs:
      devnet_version:
        description: 'aeneid; mainnet; internal-devnet'
        required: true
        default: 'internal-devnet'
        type: choice
        options:
          - aeneid
          - mainnet
          - internal-devnet

jobs:
  print-config:
    runs-on: ubuntu-latest

    steps:
      - name: Print Inputs
        run: |
          echo "Inputs:"
          echo "devnet_version: ${{ inputs.devnet_version || github.event.inputs.devnet_version || 'internal-devnet' }}"

  set-devnet-constants:
    runs-on: ubuntu-latest
    steps:
      - name: Devnet Version
        id: devnet_version
        run: |
          declare -A devnet_config=(
            ["aeneid"]="1315 https://aeneid.storyrpc.io"
            ["mainnet"]="1514 https://public.storyrpc.io"
            ["internal-devnet"]="1512 https://rpc.devnet.storyrpc.io"
          )

          devnet_version="${{ inputs.devnet_version || github.event.inputs.devnet_version || 'internal-devnet' }}"

          if [[ -n "${devnet_config[$devnet_version]}" ]]; then
            read -r chainid rpcurl <<< "${devnet_config[$devnet_version]}"
            
            echo "CHAINID=$chainid" >> $GITHUB_OUTPUT
            echo "RPCURL='$rpcurl'" >> $GITHUB_OUTPUT
          else
            echo "Unknown devnet version: $devnet_version"
            exit 1
          fi


    outputs:
      CHAINID: ${{ steps.devnet_version.outputs.CHAINID }}
      RPCURL: ${{ steps.devnet_version.outputs.RPCURL }}

  test-integration:
    needs: set-devnet-constants
    runs-on: ubuntu-latest
    env:
      RPC_URL: ${{ needs.set-devnet-constants.outputs.RPCURL }}
      TEST_SENDER_ADDRESS: "0x7D01c62110fb498e6450A7857DD172dDd41EAbD3"
      TEST_SENDER_SECRETKEY: ${{ secrets.TEST_SENDER_SECRETKEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Set Protocol Addresses
        run: |
          PROTOCOL_ADDRESS='{
            "main": {
              "AccessController": "0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a",
              "ArbitrationPolicyUMA": "0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936",
              "CoreMetadataModule": "0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16",
              "CoreMetadataViewModule": "0xB3F88038A983CeA5753E11D144228Ebb5eACdE20",
              "DisputeModule": "0x9b7A9c70AFF961C799110954fc06F3093aeb94C5",
              "EvenSplitGroupPool": "0xf96f2c30b41Cb6e0290de43C8528ae83d4f33F89",
              "GroupNFT": "0x4709798FeA84C84ae2475fF0c25344115eE1529f",
              "GroupingModule": "0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac",
              "IPAccountImpl": "0xc93d49fEdED1A2fbE3B54223Df65f4edB3845eb0",
              "IPAssetRegistry": "0x77319B4031e6eF1250907aa00018B8B1c67a244b",
              "IPGraphACL": "0x1640A22a8A086747cD377b73954545e2Dfcc9Cad",
              "IpRoyaltyVaultBeacon": "0x6928ba25Aa5c410dd855dFE7e95713d83e402AA6",
              "IpRoyaltyVaultImpl": "0x63cC7611316880213f3A4Ba9bD72b0EaA2010298",
              "LicenseRegistry": "0x529a750E02d8E2f15649c13D69a465286a780e24",
              "LicenseToken": "0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC",
              "LicensingModule": "0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f",
              "MockERC20": "0x1514000000000000000000000000000000000000",
              "ModuleRegistry": "0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5",
              "PILicenseTemplate": "0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316",
              "ProtocolAccessManager": "0xFdece7b8a2f55ceC33b53fd28936B4B1e3153d53",
              "ProtocolPauseAdmin": "0xdd661f55128A80437A0c0BDA6E13F214A3B2EB24",
              "RoyaltyModule": "0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086",
              "RoyaltyPolicyLAP": "0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E",
              "RoyaltyPolicyLRP": "0x9156e603C949481883B1d3355c6f1132D191fC41"
            }
          }'
          
          echo $PROTOCOL_ADDRESS > ./node_modules/@story-protocol/protocol-core/deploy-out/deployment-${{ needs.set-devnet-constants.outputs.CHAINID }}.json
      
      - name: Set Periphery Addresses
        run: |
          PERIPHERY_ADDRESS='{
           "main": {
              "DerivativeWorkflows": "0x9e2d496f72C547C2C535B167e06ED8729B374a4f",
              "GroupingWorkflows": "0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd",
              "LicenseAttachmentWorkflows": "0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8",
              "LockLicenseHook": "0x54C52990dA304643E7412a3e13d8E8923cD5bfF2",
              "OwnableERC20Beacon": "0xB83639aF55F03108091020b7c75a46e2eaAb4FfA",
              "OwnableERC20Template": "0xf8D299af9CBEd49f50D7844DDD1371157251d0A7",
              "RegistrationWorkflows": "0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424",
              "RoyaltyTokenDistributionWorkflows": "0xa38f42B8d33809917f23997B8423054aAB97322C",
              "RoyaltyWorkflows": "0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890",
              "SPGNFTBeacon": "0xD2926B9ecaE85fF59B6FB0ff02f568a680c01218",
              "SPGNFTImpl": "0x5266215a00c31AaA2f2BB7b951Ea0028Ea8b4e37",
              "TokenizerModule": "0xAC937CeEf893986A026f701580144D9289adAC4C",
              "TotalLicenseTokenLimitHook": "0xaBAD364Bfa41230272b08f171E0Ca939bD600478"
            }
          }'

          devnet_version="${{ inputs.devnet_version || github.event.inputs.devnet_version || 'internal-devnet' }}"
          # if [[ "$devnet_version" == "aeneid" ]]; then
          echo $PERIPHERY_ADDRESS > ./deploy-out/deployment-${{ needs.set-devnet-constants.outputs.CHAINID }}.json
          # fi

      - name: Build Contracts
        run: |
          forge build

      - name: Run DerivativeIntegration Tests
        if: always() && !cancelled()
        run: |
          forge script test/integration/workflows/DerivativeIntegration.t.sol:DerivativeIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation

      - name: Run GroupingIntegration Tests
        if: always() && !cancelled()
        run: |
          forge script test/integration/workflows/GroupingIntegration.t.sol:GroupingIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation >> test-results.log

      - name: Run LicenseAttachmentIntegration Tests
        if: always() && !cancelled()
        id: license_attachment_test
        continue-on-error: true
        run: |
          forge script test/integration/workflows/LicenseAttachmentIntegration.t.sol:LicenseAttachmentIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation > license_attachment_test.log
  
      - name: Check LicenseAttachmentIntegration Results and Append Log
        if: always() && !cancelled()
        run: |
          cat license_attachment_test.log >> test-results.log
          if [[ "${{ steps.license_attachment_test.outcome }}" == "failure" ]]; then
            if grep -q "SUCCESS: Correctly reverted when exceeding the token limit." license_attachment_test.log; then
              echo "✅ Transaction failed as expected. Continuing workflow."
              exit 0
            else
              echo "❌ Transaction failed with an unexpected error."
              exit 1
            fi
          fi

      - name: Run RegistrationIntegration Tests
        if: always() && !cancelled()
        run: |
          forge script test/integration/workflows/RegistrationIntegration.t.sol:RegistrationIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation >> test-results.log

      - name: Run RoyaltyIntegration Tests
        if: always() && !cancelled()
        run: |
          forge script test/integration/workflows/RoyaltyIntegration.t.sol:RoyaltyIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation >> test-results.log

      - name: Run RoyaltyTokenDistributionIntegration Tests
        if: always() && !cancelled()
        run: |
          forge script test/integration/workflows/RoyaltyTokenDistributionIntegration.t.sol:RoyaltyTokenDistributionIntegration --rpc-url=${{ env.RPC_URL }} -vvv --broadcast --priority-gas-price=1 --legacy --skip-simulation >> test-results.log

      - name: Merge Test Results
        run: |
          cat test-results.log

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./test-results.log
            ./license_attachment_test.log
